{"version":3,"file":"static/js/984.8a78d2ba.chunk.js","mappings":"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","sources":["constants/events.ts","pages/bankTransaction/BankTransactionForm.component.tsx","pages/bankTransaction/BankTransactionDialog.component.tsx","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["export const GROUP_LIST_REFRESH_EVENT = \"GROUP_LIST_REFRESH\";\r\nexport const ACCOUNT_LIST_REFRESH_EVENT = \"ACCOUNT_LIST_REFRESH\";\r\nexport const TRANSACTION_LIST_REFRESH_EVENT = \"TRANSACTION_LIST_REFRESH\";\r\nexport const BANK_TRANSACTION_LIST_REFRESH_EVENT = \"BANK_TRANSACTION_LIST_REFRESH\";\r\nexport const USER_LIST_REFRESH_EVENT = \"USER_LIST_REFRESH\";","import React, { MutableRefObject, Ref, useContext, useEffect, useRef, useState } from 'react';\r\nimport { Account, BankTransaction } from '../../models';\r\n\r\nimport { FormikHelpers, FormikProps, useFormik } from \"formik\";\r\nimport * as yup from 'yup';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { Button } from 'primereact/button';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { classNames } from 'primereact/utils';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { createBankTransaction, getBankTransaction, getAccountDropdownList, updateBankTransaction } from '../../api';\r\nimport { ALERT_TYPE, showAlert } from '../../services';\r\nimport { eventBus, formatAmount, formatDate } from '../../utils';\r\nimport { BANK_TRANSACTION_LIST_REFRESH_EVENT } from '../../constants';\r\nimport { AppContext, UserContext } from '../../context';\r\nimport { customFocusField } from '../../utils';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\n\r\nfunction BankTransactionFormComponent() {\r\n\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n  const [visible, setVisible] = useState<boolean>(true);\r\n  const [isCreateMode, setIsCreateMode] = useState<boolean>(true);\r\n  // const [disableTrnxMainFld, setDisableTrnxMainFld] = useState<boolean>(false);\r\n  const [accountList, setAccountList] = useState<Account[]>([]);\r\n  const appCtx = useContext(AppContext);\r\n  const userCtx = useContext(UserContext);\r\n  const [entryList, setEntryList] = useState<BankTransaction[]>([]);\r\n  const fromAccRef = useRef<any>();\r\n  const trnxDateRef = useRef<any>();\r\n  const toAccRef = useRef<any>();\r\n\r\n  const transactionMinDate = userCtx?.user?.finYearStart ? new Date(userCtx?.user?.finYearStart): undefined;\r\n  const transactionMaxDate = userCtx?.user?.finYearEnd ? new Date(userCtx?.user?.finYearEnd): undefined;\r\n  const currentDate = new Date();\r\n  currentDate.setHours(0, 0, 0, 0);\r\n\r\n  const bankTransactionForm: FormikProps<BankTransaction> = useFormik<BankTransaction>({\r\n    initialValues: {\r\n      _id: \"\",\r\n      trnxDate: currentDate,\r\n      fromAcc: undefined,\r\n      toAcc: undefined,\r\n      desc: \"\",\r\n      rno: \"\",\r\n      received: 0.00,\r\n      paid: 0.00\r\n    },\r\n    initialTouched: {\r\n      trnxDate: true\r\n    },\r\n    validationSchema: yup.object().shape({\r\n      trnxDate: yup.date().nullable().required('Transaction Date is required'),\r\n      fromAcc: yup.string().required('From account is requried'),\r\n      toAcc: yup.string().required('To account is requried').notOneOf([yup.ref('fromAcc')], 'To and From Account cannot be same'),\r\n      desc: yup.string().required('Description is required'),\r\n      rno: yup.string(),\r\n      received: yup.number().nullable(),\r\n      paid: yup.number().nullable(),\r\n    }\r\n    //   received: yup.number().nullable().when('paid', {\r\n    //     is: (paidValue: any) => {\r\n    //       console.log(`paidValue > ${paidValue} > ${paidValue == null || paidValue == undefined || paidValue == 0}`);\r\n    //       if(paidValue == null || paidValue == undefined || paidValue == 0 ){ return true; }\r\n    //       return false;\r\n    //     },\r\n    //     then: yup.number().moreThan(0, \"Received or Paid amount must be more than 0\").required(\"Received or Paid amount must be more than 0\").nullable(),\r\n    //     otherwise: yup.number().nullable()\r\n    //   }),\r\n    //   paid: yup.number().nullable().when('received', {\r\n    //     is: (receivedValue: any) => {\r\n    //       console.log(`receivedValue > ${receivedValue} > ${receivedValue == null || receivedValue == undefined || receivedValue == 0}`); \r\n    //       if(receivedValue == null || receivedValue == undefined || receivedValue == 0 ){ return true; }\r\n    //       return false;\r\n    //     },\r\n    //     then: yup.number().moreThan(0, \"Received or Paid amount must be more than 0\").required(\"Received or Paid amount must be more than 0\").nullable(),\r\n    //     otherwise: yup.number().nullable()\r\n    //   }),\r\n    // },\r\n    // [\r\n    //   ['received', 'paid'],\r\n    //   ['paid', 'received']\r\n    // ]\r\n    )\r\n    .test(function(value, context){\r\n\r\n      if(value.paid && value.received){\r\n        const error =[];\r\n        error.push(context.createError({message: \"Should not enter both paid and received amounts\", path: \"received\"}))\r\n        error.push(context.createError({message: \"Should not enter both paid and received amounts\", path: \"paid\"}))\r\n        return new yup.ValidationError(error);\r\n      }\r\n\r\n      if(!value.paid && !value.received){\r\n        const error =[];\r\n        error.push(context.createError({message: \"Received or Paid amount must be more than 0\", path: \"received\"}))\r\n        error.push(context.createError({message: \"Received or Paid amount must be more than 0\", path: \"paid\"}))\r\n        return new yup.ValidationError(error);\r\n      }\r\n\r\n      return true;\r\n    }),\r\n    onSubmit: async (data: BankTransaction, {setErrors}: FormikHelpers<BankTransaction>) => {\r\n\r\n      appCtx?.setDisplayLoader(true);\r\n\r\n      const transaction: any = Object.assign({}, data);\r\n\r\n      transaction.paid = transaction.paid || 0;\r\n      transaction.received = transaction.received || 0;\r\n\r\n      try{\r\n\r\n        let response;\r\n\r\n        if(isCreateMode){\r\n\r\n          delete transaction._id;\r\n\r\n          response = await createBankTransaction(transaction);\r\n\r\n          appCtx?.setDisplayLoader(false);\r\n\r\n        }else{\r\n\r\n          const id = transaction._id;\r\n\r\n          delete transaction._id;\r\n\r\n          response = await updateBankTransaction(transaction, id);\r\n\r\n          appCtx?.setDisplayLoader(false);\r\n\r\n          const alertConfig = {title: 'Success', message: response.data.msg, type: ALERT_TYPE.SUCCESS, onClose: () => {\r\n            closeDialog(true);\r\n          }};\r\n          showAlert(alertConfig);\r\n\r\n          return;\r\n        }\r\n\r\n        transaction._id = response.data.id;\r\n\r\n        setEntryList( (prevState: BankTransaction[]) => { return ([] as BankTransaction[]).concat(prevState).concat( [transaction] ) } );\r\n\r\n        clearFieldValues(transaction);\r\n\r\n      }catch(e: any){\r\n\r\n        appCtx?.setDisplayLoader(false);\r\n\r\n        const alertConfig = {title: 'Error', message: e as string, type: ALERT_TYPE.ERROR};\r\n        showAlert(alertConfig);\r\n      }\r\n\r\n    }\r\n  });\r\n\r\n  useEffect( () => {\r\n    \r\n    const getAccountList = async () => {\r\n  \r\n      try {\r\n        const response = await getAccountDropdownList();\r\n        setAccountList(response.data);\r\n      } catch (e) {\r\n        setAccountList([]);\r\n      }\r\n    }\r\n\r\n    getAccountList();\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n\r\n    if(!params.id)\r\n    {\r\n      setIsCreateMode(true);\r\n      return;\r\n    }\r\n\r\n    setIsCreateMode(false);\r\n\r\n    const getBankTransactionInfo = async () => {\r\n      try {\r\n        const response = await getBankTransaction(params.id as string);\r\n\r\n        bankTransactionForm.setValues( {...response.data, trnxDate: (new Date(response.data.trnxDate))} );\r\n\r\n        // setDisableTrnxMainFld(true);\r\n  \r\n      } catch (e) {\r\n        const alertConfig = {title: 'Error', message: e as string, type: ALERT_TYPE.ERROR};\r\n        showAlert(alertConfig);\r\n      }\r\n    }\r\n\r\n    getBankTransactionInfo();\r\n\r\n  }, [params.id, bankTransactionForm.setValues]);\r\n\r\n  const closeDialog = (refresh?: boolean) => {\r\n\r\n    refresh && eventBus.dispatch(BANK_TRANSACTION_LIST_REFRESH_EVENT);\r\n\r\n    setVisible(false);\r\n    navigate(-1);\r\n  }\r\n\r\n  const footer = (\r\n      <div>\r\n          <Button label=\"Close\" icon=\"pi pi-times\" onClick={() => closeDialog()} />\r\n      </div>\r\n  );\r\n\r\n  const clearFieldValues = (data?: BankTransaction) => {\r\n\r\n    const { _id, fromAcc, trnxDate } = data ?? bankTransactionForm.values;\r\n\r\n    bankTransactionForm.resetForm({\r\n      values: {\r\n        _id: _id,\r\n        trnxDate: trnxDate,\r\n        fromAcc: fromAcc,\r\n        toAcc: undefined,\r\n        desc: \"\",\r\n        rno: \"\",\r\n        received: 0.00,\r\n        paid: 0.00\r\n      },\r\n      touched: {\r\n        trnxDate: true,\r\n        fromAcc: true\r\n      }\r\n    });\r\n\r\n    customFocusField(fromAccRef);\r\n  }\r\n\r\n  const isFormFieldValid = (name: keyof BankTransaction) => !!(bankTransactionForm.touched[name] && bankTransactionForm.errors[name]);\r\n\r\n  const getFormErrorMessage = (name: keyof BankTransaction) => {\r\n    return isFormFieldValid(name) && <small className=\"p-error\">{bankTransactionForm.errors[name]}</small>;\r\n  };\r\n\r\n  const selectedAccountTemplate = function(option:any, props:any){\r\n\r\n    if (option) {\r\n      return <span>{option.code + \" - \" + option.firmName}</span>\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            {props.placeholder}\r\n        </span>\r\n    );\r\n\r\n  }\r\n\r\n  const optionAccountTemplate = function(option: any){\r\n    return (\r\n        <span>{option.code + \" - \" + option.firmName}</span>\r\n    );\r\n  }\r\n\r\n  // const disableAddTrnxBtn = ( ) => {\r\n\r\n  //   if( !bankTransactionForm.touched['fromAcc'] ){\r\n  //     return true;\r\n  //   }\r\n\r\n  //   if(bankTransactionForm.errors['fromAcc']){\r\n  //     return true;\r\n  //   }\r\n\r\n  //   return false;\r\n  // }\r\n\r\n  const formatTransactionAmount = (rowData: BankTransaction, field: 'received'|'paid') => {\r\n    return formatAmount(rowData[field]);\r\n  }\r\n\r\n  const formatTransactionDate = (rowData: BankTransaction,) => {\r\n    return formatDate(new Date(rowData.trnxDate));\r\n  }\r\n\r\n  // function disableTrnxField(){\r\n  //   setDisableTrnxMainFld( (prevState) => !prevState );\r\n  // }\r\n\r\n  return (\r\n    <Dialog visible={visible} modal closeOnEscape={false} header={`Bank Transaction - ${isCreateMode ? 'Create' : 'Edit' }`} footer={footer} onHide={ closeDialog } style={{'width': '100vw', 'height': '100vh'}} blockScroll={true}>\r\n        <div className=\"p-2\">\r\n          <form className=\"p-fluid\">\r\n            {/* <div className=\"flex gap-4 mb-6\">\r\n              <div className=\"field self-center\">\r\n                <label htmlFor=\"fromAcc\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>From Account</label>\r\n              </div>\r\n              <div className=\"field w-1/4 max-w-1/4\">\r\n                <Dropdown inputId='fromAcc' id=\"fromAcc\" name='fromAcc' options={accountList} optionLabel=\"firmName\" optionValue=\"code\" value={bankTransactionForm.values.fromAcc} filter showClear filterBy=\"code,firmName\" filterPlaceholder=\"Search group code or name\" onChange={(e) => { bankTransactionForm.setFieldValue(\"fromAcc\", e.value) }} onBlur={bankTransactionForm.handleBlur} placeholder='Select Account'\r\n                 valueTemplate={selectedAccountTemplate} itemTemplate={optionAccountTemplate} required className={classNames({ 'p-invalid': isFormFieldValid('fromAcc'), 'p-inputtext-sm': true })} style={{\"width\": \"100%\"}} disabled={!isCreateMode || disableTrnxMainFld} resetFilterOnHide={true} \r\n                 ref={fromAccRef} autoFocus >\r\n                </Dropdown>\r\n                {getFormErrorMessage('fromAcc')}\r\n              </div>\r\n              <div className=\"field\">\r\n                { !disableTrnxMainFld && <Button type='button' id=\"addTrnxBtn\" label=\"Add Transaction\" onClick={() => { disableTrnxField(); customFocusField(trnxDateRef); } } className=\"w-1/2\" disabled={ disableAddTrnxBtn() } /> }\r\n                { disableTrnxMainFld && <Button type='button' id=\"changeTrnxBtn\" label=\"Change Account\" onClick={ () => { disableTrnxField(); clearFieldValues(); } } className=\"w-1/2\" /> }\r\n              </div>\r\n            </div> */}\r\n            <div className=\"flex gap-2 mb-3\">\r\n              <div className=\"field w-56\">\r\n                <label htmlFor=\"fromAcc\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>From Account</label>\r\n                <Dropdown inputId='fromAcc' id=\"fromAcc\" name='fromAcc' options={accountList} optionLabel=\"firmName\" optionValue=\"code\" value={bankTransactionForm.values.fromAcc} filter showClear filterBy=\"code,firmName\" filterPlaceholder=\"Search group code or name\" onChange={(e) => { bankTransactionForm.setFieldValue(\"fromAcc\", e.value) }} onBlur={bankTransactionForm.handleBlur} placeholder='Select Account'\r\n                 valueTemplate={selectedAccountTemplate} itemTemplate={optionAccountTemplate} required className={classNames({ 'p-invalid': isFormFieldValid('fromAcc'), 'p-inputtext-sm': true })} style={{\"width\": \"100%\"}} disabled={!isCreateMode} resetFilterOnHide={true} \r\n                 ref={fromAccRef} autoFocus >\r\n                </Dropdown>\r\n                {getFormErrorMessage('fromAcc')}\r\n              </div>\r\n              <div className=\"field w-56\">\r\n                  <label htmlFor=\"trnxDate\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Date</label>\r\n                  <Calendar name=\"trnxDate\" id=\"trnxDate\" value={bankTransactionForm.values.trnxDate} onChange={ (e) => { bankTransactionForm.setFieldValue('trnxDate', e.target.value); } } onSelect={ () => { customFocusField(toAccRef); } } onBlur={bankTransactionForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('trnxDate'), 'p-inputtext-sm': true })} placeholder=\"Trnx. Date\" required\r\n                    dateFormat=\"dd/mm/yy\" minDate={transactionMinDate} maxDate={transactionMaxDate} monthNavigator yearNavigator yearRange={`${ transactionMinDate?.getFullYear() }:${transactionMaxDate?.getFullYear()}`} mask=\"99/99/9999\"\r\n                    ref={trnxDateRef} showOnFocus={false}\r\n                  />\r\n                  {getFormErrorMessage('trnxDate')}\r\n              </div>\r\n              <div className=\"field w-56\">\r\n                <label htmlFor=\"toAcc\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>To Account</label>\r\n                <Dropdown inputId='toAcc' id=\"toAcc\" name='toAcc' options={accountList} optionLabel=\"firmName\" optionValue=\"code\" value={bankTransactionForm.values.toAcc} filter showClear filterBy=\"code,firmName\" filterPlaceholder=\"Search group code or name\" onChange={(e) => { bankTransactionForm.setFieldValue(\"toAcc\", e.value) }} onBlur={bankTransactionForm.handleBlur} placeholder='Select Account'\r\n                  valueTemplate={selectedAccountTemplate} itemTemplate={optionAccountTemplate} required className={classNames({ 'p-invalid': isFormFieldValid('toAcc'), 'p-inputtext-sm': true })} style={{\"width\": \"100%\"}} resetFilterOnHide={true}\r\n                  ref={toAccRef}>\r\n                </Dropdown>\r\n                {getFormErrorMessage('toAcc')}\r\n              </div>\r\n              <div className=\"field w-56\">\r\n                <label htmlFor=\"desc\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Description</label>\r\n                <InputText type=\"text\" name=\"desc\" id=\"desc\" value={bankTransactionForm.values.desc} onChange={bankTransactionForm.handleChange} onBlur={bankTransactionForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('desc'), 'p-inputtext-sm': true })} placeholder=\"Description\" required maxLength={10} />\r\n                {getFormErrorMessage('desc')}\r\n              </div>\r\n              <div className=\"field w-56\">\r\n                <label htmlFor=\"rno\" className=\"block mb-2\">Receipt No</label>\r\n                <InputText type=\"text\" name=\"rno\" id=\"rno\" value={bankTransactionForm.values.rno} onChange={bankTransactionForm.handleChange} onBlur={bankTransactionForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('rno'), 'p-inputtext-sm': true })} placeholder=\"Receipt No\" maxLength={10}/>\r\n                {getFormErrorMessage('rno')}\r\n              </div>\r\n              <div className=\"field w-40\">\r\n                <label htmlFor=\"received\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Received Amount</label>\r\n                <InputNumber id=\"received\" name=\"received\" value={bankTransactionForm.values.received} onValueChange={bankTransactionForm.handleChange} onBlur={bankTransactionForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('received'), 'p-inputtext-sm': true })} placeholder=\"Received Amount\" mode=\"decimal\" maxFractionDigits={2} min={0} max={10000000} locale=\"en-IN\" required/>\r\n                {getFormErrorMessage('received')}\r\n              </div>\r\n              <div className=\"field w-40\">\r\n                <label htmlFor=\"paid\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Paid Amount</label>\r\n                <InputNumber id=\"paid\" name=\"paid\" value={bankTransactionForm.values.paid} onValueChange={bankTransactionForm.handleChange} onBlur={bankTransactionForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('paid'), 'p-inputtext-sm': true })} placeholder=\"Paid Amount\" mode=\"decimal\" maxFractionDigits={2} min={0} max={10000000} locale=\"en-IN\" required/>\r\n                {getFormErrorMessage('paid')}\r\n              </div>\r\n              <div className='field w-32'>\r\n                <label className=\"block invisible\">.</label>\r\n                <Button type=\"button\" label=\"Save\" icon=\"pi pi-save\" onClick={bankTransactionForm.submitForm}/>\r\n              </div>\r\n            </div>\r\n          </form>\r\n          {\r\n            entryList.length > 0 && (\r\n              <div>\r\n                <DataTable value={entryList}\r\n                size=\"small\"\r\n                responsiveLayout=\"scroll\"\r\n                showGridlines\r\n                scrollable\r\n                scrollHeight=\"35vh\"\r\n                stripedRows\r\n                >\r\n                  <Column field=\"fromAcc\" header=\"From Acc\"></Column>\r\n                  <Column field=\"trnxDate\" header=\"Trnx. Date\" body={formatTransactionDate}></Column>\r\n                  <Column field=\"toAcc\" header=\"To Acc\"></Column>\r\n                  <Column field=\"desc\" header=\"Description\"></Column>\r\n                  <Column field=\"rno\" header=\"Receipt\"></Column>\r\n                  <Column\r\n                    field=\"received\"\r\n                    header=\"Received\"\r\n                    align=\"right\"\r\n                    alignHeader=\"left\"\r\n                    body={(rowData) => { return formatTransactionAmount(rowData, \"received\") }}\r\n                  ></Column>\r\n                  <Column\r\n                    field=\"paid\"\r\n                    header=\"Paid\"\r\n                    align=\"right\"\r\n                    alignHeader=\"left\"\r\n                    body={(rowData) => { return formatTransactionAmount(rowData, \"paid\") }}\r\n                  ></Column>\r\n                </DataTable>\r\n              </div>\r\n            )\r\n          }\r\n        </div>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default BankTransactionFormComponent;","import React from \"react\";\r\nimport { Outlet, Route, Routes } from \"react-router-dom\";\r\nimport BankTransactionForm from \"./BankTransactionForm.component\";\r\n\r\nfunction BankTransactionDialogComponent() {\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<Outlet></Outlet>}>\r\n        <Route\r\n          path=\"create\"\r\n          element={<BankTransactionForm></BankTransactionForm>}\r\n        ></Route>\r\n        <Route\r\n          path=\"edit/:id\"\r\n          element={<BankTransactionForm></BankTransactionForm>}\r\n        ></Route>\r\n      </Route>\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default BankTransactionDialogComponent;","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["GROUP_LIST_REFRESH_EVENT","ACCOUNT_LIST_REFRESH_EVENT","TRANSACTION_LIST_REFRESH_EVENT","BANK_TRANSACTION_LIST_REFRESH_EVENT","USER_LIST_REFRESH_EVENT","params","useParams","navigate","useNavigate","useState","visible","setVisible","isCreateMode","setIsCreateMode","accountList","setAccountList","appCtx","useContext","AppContext","userCtx","UserContext","entryList","setEntryList","fromAccRef","useRef","trnxDateRef","toAccRef","transactionMinDate","user","finYearStart","Date","undefined","transactionMaxDate","finYearEnd","currentDate","setHours","bankTransactionForm","useFormik","initialValues","_id","trnxDate","fromAcc","toAcc","desc","rno","received","paid","initialTouched","validationSchema","yup","shape","nullable","required","notOneOf","test","value","context","error","push","createError","message","path","onSubmit","data","setErrors","setDisplayLoader","transaction","Object","assign","createBankTransaction","response","id","updateBankTransaction","alertConfig","title","msg","type","ALERT_TYPE","onClose","closeDialog","showAlert","prevState","concat","clearFieldValues","useEffect","getAccountList","getAccountDropdownList","getBankTransactionInfo","getBankTransaction","setValues","refresh","eventBus","footer","label","icon","onClick","values","resetForm","touched","customFocusField","isFormFieldValid","name","errors","getFormErrorMessage","className","selectedAccountTemplate","option","props","code","firmName","placeholder","optionAccountTemplate","formatTransactionAmount","rowData","field","formatAmount","modal","closeOnEscape","header","onHide","style","blockScroll","htmlFor","inputId","options","optionLabel","optionValue","filter","showClear","filterBy","filterPlaceholder","onChange","e","setFieldValue","onBlur","handleBlur","valueTemplate","itemTemplate","classNames","disabled","resetFilterOnHide","ref","autoFocus","target","onSelect","dateFormat","minDate","maxDate","monthNavigator","yearNavigator","yearRange","getFullYear","mask","showOnFocus","handleChange","maxLength","onValueChange","mode","maxFractionDigits","min","max","locale","submitForm","length","size","responsiveLayout","showGridlines","scrollable","scrollHeight","stripedRows","body","formatDate","align","alignHeader","element","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","i","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}