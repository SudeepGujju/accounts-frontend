{"version":3,"file":"static/js/16.1d8435f8.chunk.js","mappings":"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","sources":["constants/events.ts","pages/group/GroupForm.component.tsx","pages/group/GroupDialog.component.tsx"],"sourcesContent":["export const GROUP_LIST_REFRESH_EVENT = \"GROUP_LIST_REFRESH\";\r\nexport const ACCOUNT_LIST_REFRESH_EVENT = \"ACCOUNT_LIST_REFRESH\";\r\nexport const TRANSACTION_LIST_REFRESH_EVENT = \"TRANSACTION_LIST_REFRESH\";\r\nexport const BANK_TRANSACTION_LIST_REFRESH_EVENT = \"BANK_TRANSACTION_LIST_REFRESH\";\r\nexport const USER_LIST_REFRESH_EVENT = \"USER_LIST_REFRESH\";","import React, { useContext, useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './GroupForm.component.css';\r\n\r\nimport { FormikHelpers, FormikProps, useFormik } from \"formik\";\r\nimport * as yup from 'yup';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { Button } from 'primereact/button';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { classNames } from 'primereact/utils';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { createGroup, getGroup, updateGroup} from '../../api';\r\nimport { GroupType, GROUP_TYPE_NAME_BALANCE_SHEET, GROUP_TYPE_NAME_TRADING, GROUP_TYPE_NAME_PROFIT_AND_LOSS, Group } from '../../models';\r\nimport { ALERT_TYPE, showAlert } from '../../services';\r\nimport { eventBus } from '../../utils';\r\nimport { GROUP_LIST_REFRESH_EVENT } from '../../constants';\r\nimport { AppContext } from '../../context';\r\n\r\n\r\nconst groupTypes = [\r\n  {label: GROUP_TYPE_NAME_BALANCE_SHEET, value: GroupType.BalanceSheet},\r\n  {label: GROUP_TYPE_NAME_PROFIT_AND_LOSS, value: GroupType.ProfitAndLoss},\r\n  {label: GROUP_TYPE_NAME_TRADING, value: GroupType.Trading},\r\n]\r\n\r\nfunction GroupFormComponent() {\r\n\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n  const [visible, setVisible] = useState<boolean>(true);\r\n  const [isCreateMode, setIsCreateMode] = useState<boolean>(true);\r\n  const appCtx = useContext(AppContext);\r\n\r\n  const groupForm: FormikProps<Group> = useFormik<Group>({\r\n    initialValues: {\r\n      _id: \"\",\r\n      code: \"\",\r\n      name: \"\",\r\n      grpType: GroupType.BalanceSheet\r\n    },\r\n    validationSchema: yup.object({\r\n      code: yup.string().max(10,'Code must be 10 characters or less').required('Code is required'),\r\n      name: yup.string().max(50, 'Name must be 50 characters or less').required('Name is required'),\r\n      grpType: yup.mixed().oneOf( [GroupType.BalanceSheet, GroupType.ProfitAndLoss, GroupType.Trading] ).required('Group Type is required')\r\n    }),\r\n    onSubmit: async (data: Group, {setErrors}: FormikHelpers<Group>) => {\r\n\r\n      appCtx?.setDisplayLoader(true);\r\n\r\n      const group: any = Object.assign({}, data);\r\n\r\n      try{\r\n\r\n        let response;\r\n\r\n        if(isCreateMode){\r\n\r\n          delete group._id;\r\n\r\n          response = await createGroup(group);\r\n\r\n        }else{\r\n\r\n          const id = group._id;\r\n\r\n          delete group._id;\r\n\r\n          response = await updateGroup(group, id);\r\n        }\r\n\r\n        appCtx?.setDisplayLoader(false);\r\n\r\n        const alertConfig = {title: 'Success', message: response.data, type: ALERT_TYPE.SUCCESS, onClose: () => {\r\n          closeDialog(true);\r\n        }};\r\n        showAlert(alertConfig);\r\n\r\n      }catch(e: any){\r\n\r\n        appCtx?.setDisplayLoader(false);\r\n\r\n        if(typeof e == 'string' && e.includes(\"already exists\")){\r\n          setErrors({'code': 'Code already exists'});\r\n        }else{\r\n          const alertConfig = {title: 'Error', message: e as string, type: ALERT_TYPE.ERROR};\r\n          showAlert(alertConfig);\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n\r\n    if(!params.id)\r\n    {\r\n      setIsCreateMode(true);\r\n      return;\r\n    }\r\n\r\n    setIsCreateMode(false);\r\n\r\n    const getGroupInfo = async () => {\r\n      try {\r\n        const response = await getGroup(params.id as string);\r\n\r\n        groupForm.setValues( response.data )\r\n  \r\n      } catch (e) {\r\n        const alertConfig = {title: 'Error', message: e as string, type: ALERT_TYPE.ERROR};\r\n        showAlert(alertConfig);\r\n      }\r\n    }\r\n\r\n    getGroupInfo();\r\n\r\n  }, [params.id]);\r\n\r\n  const closeDialog = (refresh?: boolean) => {\r\n\r\n    refresh && eventBus.dispatch(GROUP_LIST_REFRESH_EVENT);\r\n\r\n    setVisible(false);\r\n    navigate(-1);\r\n  }\r\n\r\n  const footer = (\r\n      <div>\r\n          <Button label=\"Close\" icon=\"pi pi-times\" onClick={() => closeDialog()} />\r\n          <Button type=\"button\" label=\"Save\" icon=\"pi pi-save\" onClick={groupForm.submitForm} disabled={!groupForm.isValid} />\r\n      </div>\r\n  );\r\n\r\n  const isFormFieldValid = (name: keyof Group) => !!(groupForm.touched[name] && groupForm.errors[name]);\r\n\r\n  const getFormErrorMessage = (name: keyof Group) => {\r\n    return isFormFieldValid(name) && <small className=\"p-error\">{groupForm.errors[name]}</small>;\r\n  };\r\n\r\n  return (\r\n    <Dialog visible={visible} modal closeOnEscape={false} header={`Group - ${isCreateMode ? 'Create' : 'Edit' }`} footer={footer} onHide={ closeDialog } style={{'width': '50%'}} blockScroll={true}>\r\n        <div className=\"p-2\">\r\n          <form className=\"p-fluid\">\r\n            <div className=\"field mb-6\">\r\n                <label htmlFor=\"code\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Code</label>\r\n                <InputText type=\"text\" name=\"code\" id=\"code\" value={groupForm.values.code} onChange={groupForm.handleChange} onBlur={groupForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('code'), 'p-inputtext-sm': true })} placeholder=\"Code\" autoFocus required maxLength={10} disabled={!isCreateMode} />\r\n                {getFormErrorMessage('code')}\r\n            </div>\r\n            <div className=\"field mb-6\">\r\n              <label htmlFor=\"name\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Name</label>\r\n              <InputText type=\"text\" name=\"name\" id=\"name\" value={groupForm.values.name} onChange={groupForm.handleChange} onBlur={groupForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('name'), 'p-inputtext-sm': true })} placeholder=\"Name\" required maxLength={50} />\r\n              {getFormErrorMessage('name')}\r\n            </div>\r\n            <div className=\"field mb-6\">\r\n              <label htmlFor=\"grpType\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Type</label>\r\n              <Dropdown inputId=\"grpType\" name='grpType' id='grpType' options={groupTypes} optionLabel=\"label\" optionValue=\"value\" value={groupForm.values.grpType} onChange={groupForm.handleChange} onBlur={groupForm.handleBlur} placeholder='Select Group Type' className={classNames({ 'p-invalid': isFormFieldValid('grpType') })}>\r\n              </Dropdown>\r\n              {getFormErrorMessage('grpType')}\r\n            </div>\r\n          </form>\r\n        </div>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default GroupFormComponent","import React from \"react\";\r\nimport { Outlet, Route, Routes } from \"react-router-dom\";\r\nimport GroupFormComponent from \"./GroupForm.component\";\r\n\r\nfunction GroupDialogComponent() {\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<Outlet></Outlet>}>\r\n        <Route\r\n          path=\"create\"\r\n          element={<GroupFormComponent></GroupFormComponent>}\r\n        ></Route>\r\n        <Route\r\n          path=\"edit/:id\"\r\n          element={<GroupFormComponent></GroupFormComponent>}\r\n        ></Route>\r\n      </Route>\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default GroupDialogComponent;"],"names":["GROUP_LIST_REFRESH_EVENT","ACCOUNT_LIST_REFRESH_EVENT","TRANSACTION_LIST_REFRESH_EVENT","BANK_TRANSACTION_LIST_REFRESH_EVENT","USER_LIST_REFRESH_EVENT","groupTypes","label","GROUP_TYPE_NAME_BALANCE_SHEET","value","GroupType","GROUP_TYPE_NAME_PROFIT_AND_LOSS","GROUP_TYPE_NAME_TRADING","params","useParams","navigate","useNavigate","useState","visible","setVisible","isCreateMode","setIsCreateMode","appCtx","useContext","AppContext","groupForm","useFormik","initialValues","_id","code","name","grpType","validationSchema","yup","max","required","oneOf","onSubmit","data","setErrors","setDisplayLoader","group","Object","assign","createGroup","response","id","updateGroup","alertConfig","title","message","type","ALERT_TYPE","onClose","closeDialog","showAlert","includes","useEffect","getGroupInfo","getGroup","setValues","refresh","eventBus","footer","icon","onClick","submitForm","disabled","isValid","isFormFieldValid","touched","errors","getFormErrorMessage","className","modal","closeOnEscape","header","onHide","style","blockScroll","htmlFor","values","onChange","handleChange","onBlur","handleBlur","classNames","placeholder","autoFocus","maxLength","inputId","options","optionLabel","optionValue","path","element"],"sourceRoot":""}