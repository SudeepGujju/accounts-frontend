{"version":3,"file":"static/js/837.6a287103.chunk.js","mappings":"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","sources":["constants/events.ts","pages/transaction/TransactionForm.component.tsx","pages/transaction/TransactionDialog.component.tsx","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["export const GROUP_LIST_REFRESH_EVENT = \"GROUP_LIST_REFRESH\";\r\nexport const ACCOUNT_LIST_REFRESH_EVENT = \"ACCOUNT_LIST_REFRESH\";\r\nexport const TRANSACTION_LIST_REFRESH_EVENT = \"TRANSACTION_LIST_REFRESH\";\r\nexport const BANK_TRANSACTION_LIST_REFRESH_EVENT = \"BANK_TRANSACTION_LIST_REFRESH\";\r\nexport const USER_LIST_REFRESH_EVENT = \"USER_LIST_REFRESH\";","import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { Account, Transaction } from '../../models';\r\n\r\nimport { FormikHelpers, FormikProps, useFormik } from \"formik\";\r\nimport * as yup from 'yup';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { Button } from 'primereact/button';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { classNames } from 'primereact/utils';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { createTransaction, getTransaction, getAccountDropdownList, updateTransaction } from '../../api';\r\nimport { ALERT_TYPE, showAlert } from '../../services';\r\nimport { customFocusField, eventBus, formatAmount, formatDate } from '../../utils';\r\nimport { TRANSACTION_LIST_REFRESH_EVENT } from '../../constants';\r\nimport { AppContext, UserContext } from '../../context';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\n\r\n\r\nfunction TransactionFormComponent() {\r\n\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n  const [visible, setVisible] = useState<boolean>(true);\r\n  const [isCreateMode, setIsCreateMode] = useState<boolean>(true);\r\n  const [disableTrnxMainFld, setDisableTrnxMainFld] = useState<boolean>(false);\r\n  const [accountList, setAccountList] = useState<Account[]>([]);\r\n  const appCtx = useContext(AppContext);\r\n  const userCtx = useContext(UserContext);\r\n  const [entryList, setEntryList] = useState<Transaction[]>([]);\r\n  const fromAccRef = useRef<any>();\r\n  const trnxDateRef = useRef<any>();\r\n  const toAccRef = useRef<any>();\r\n\r\n  const transactionMinDate = userCtx?.user?.finYearStart ? new Date(userCtx?.user?.finYearStart): undefined;\r\n  const transactionMaxDate = userCtx?.user?.finYearEnd ? new Date(userCtx?.user?.finYearEnd): undefined;\r\n  const currentDate = new Date();\r\n  currentDate.setHours(0, 0, 0, 0);\r\n\r\n  const transactionForm: FormikProps<Transaction> = useFormik<Transaction>({\r\n    initialValues: {\r\n      _id: \"\",\r\n      trnxDate: currentDate,\r\n      fromAcc: undefined,\r\n      toAcc: undefined,\r\n      desc: \"\",\r\n      rno: \"\",\r\n      received: 0.00,\r\n      paid: 0.00\r\n    },\r\n    initialTouched: {\r\n      trnxDate: true\r\n    },\r\n    validationSchema: yup.object().shape({\r\n      trnxDate: yup.date().nullable().required('Transaction Date is required'),\r\n      fromAcc: yup.string().required('From account is requried'),\r\n      toAcc: yup.string().required('To account is requried').notOneOf([yup.ref('fromAcc')], 'To and From Account cannot be same'),\r\n      desc: yup.string().required('Description is required'),\r\n      rno: yup.string(),\r\n      received: yup.number().nullable(),\r\n      paid: yup.number().nullable(),\r\n    }\r\n    //   received: yup.number().nullable().when('paid', {\r\n    //     is: (paidValue: any) => {\r\n    //       console.log(`paidValue > ${paidValue} > ${paidValue == null || paidValue == undefined || paidValue == 0}`);\r\n    //       if(paidValue == null || paidValue == undefined || paidValue == 0 ){ return true; }\r\n    //       return false;\r\n    //     },\r\n    //     then: yup.number().moreThan(0, \"Received or Paid amount must be more than 0\").required(\"Received or Paid amount must be more than 0\").nullable(),\r\n    //     otherwise: yup.number().nullable()\r\n    //   }),\r\n    //   paid: yup.number().nullable().when('received', {\r\n    //     is: (receivedValue: any) => {\r\n    //       console.log(`receivedValue > ${receivedValue} > ${receivedValue == null || receivedValue == undefined || receivedValue == 0}`); \r\n    //       if(receivedValue == null || receivedValue == undefined || receivedValue == 0 ){ return true; }\r\n    //       return false;\r\n    //     },\r\n    //     then: yup.number().moreThan(0, \"Received or Paid amount must be more than 0\").required(\"Received or Paid amount must be more than 0\").nullable(),\r\n    //     otherwise: yup.number().nullable()\r\n    //   }),\r\n    // },\r\n    // [\r\n    //   ['received', 'paid'],\r\n    //   ['paid', 'received']\r\n    // ]\r\n    )\r\n    .test(function(value, context){\r\n\r\n      if(value.paid && value.received){\r\n        const error =[];\r\n        error.push(context.createError({message: \"Should not enter both paid and received amounts\", path: \"received\"}))\r\n        error.push(context.createError({message: \"Should not enter both paid and received amounts\", path: \"paid\"}))\r\n        return new yup.ValidationError(error);\r\n      }\r\n\r\n      if(!value.paid && !value.received){\r\n        const error =[];\r\n        error.push(context.createError({message: \"Received or Paid amount must be more than 0\", path: \"received\"}))\r\n        error.push(context.createError({message: \"Received or Paid amount must be more than 0\", path: \"paid\"}))\r\n        return new yup.ValidationError(error);\r\n      }\r\n\r\n      return true;\r\n    }),\r\n    onSubmit: async (data: Transaction, {setErrors}: FormikHelpers<Transaction>) => {\r\n\r\n      appCtx?.setDisplayLoader(true);\r\n\r\n      const transaction: any = Object.assign({}, data);\r\n\r\n      transaction.paid = transaction.paid || 0;\r\n      transaction.received = transaction.received || 0;\r\n\r\n      try{\r\n\r\n        let response;\r\n\r\n        if(isCreateMode){\r\n\r\n          delete transaction._id;\r\n\r\n          response = await createTransaction(transaction);\r\n\r\n          appCtx?.setDisplayLoader(false);\r\n\r\n        }else{\r\n\r\n          const id = transaction._id;\r\n\r\n          delete transaction._id;\r\n\r\n          response = await updateTransaction(transaction, id);\r\n\r\n          appCtx?.setDisplayLoader(false);\r\n\r\n          const alertConfig = {title: 'Success', message: response.data.msg, type: ALERT_TYPE.SUCCESS, onClose: () => {\r\n            closeDialog(true);\r\n          }};\r\n          showAlert(alertConfig);\r\n\r\n          return;\r\n        }\r\n\r\n        transaction._id = response.data.id;\r\n\r\n        setEntryList( (prevState: Transaction[]) => { return ([] as Transaction[]).concat(prevState).concat( [transaction] ) } );\r\n\r\n        clearFieldValues(transaction);\r\n\r\n      }catch(e: any){\r\n\r\n        appCtx?.setDisplayLoader(false);\r\n\r\n        const alertConfig = {title: 'Error', message: e as string, type: ALERT_TYPE.ERROR};\r\n        showAlert(alertConfig);\r\n      }\r\n\r\n    }\r\n  });\r\n\r\n  useEffect( () => {\r\n    \r\n    const getAccountList = async () => {\r\n  \r\n      try {\r\n        const response = await getAccountDropdownList();\r\n        setAccountList(response.data);\r\n      } catch (e) {\r\n        setAccountList([]);\r\n      }\r\n    }\r\n\r\n    getAccountList();\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n\r\n    if(!params.id)\r\n    {\r\n      setIsCreateMode(true);\r\n      return;\r\n    }\r\n\r\n    setIsCreateMode(false);\r\n\r\n    const getTransactionInfo = async () => {\r\n      try {\r\n        const response = await getTransaction(params.id as string);\r\n\r\n        transactionForm.setValues( {...response.data, trnxDate: (new Date(response.data.trnxDate))} );\r\n\r\n        setDisableTrnxMainFld(true);\r\n  \r\n      } catch (e) {\r\n        const alertConfig = {title: 'Error', message: e as string, type: ALERT_TYPE.ERROR};\r\n        showAlert(alertConfig);\r\n      }\r\n    }\r\n\r\n    getTransactionInfo();\r\n\r\n  }, [params.id, transactionForm.setValues]);\r\n\r\n  const closeDialog = (refresh?: boolean) => {\r\n\r\n    refresh && eventBus.dispatch(TRANSACTION_LIST_REFRESH_EVENT);\r\n\r\n    setVisible(false);\r\n    navigate(-1);\r\n  }\r\n\r\n  const footer = (\r\n      <div>\r\n          <Button label=\"Close\" icon=\"pi pi-times\" onClick={() => closeDialog()} />\r\n      </div>\r\n  );\r\n\r\n  const clearFieldValues = (data?: Transaction) => {\r\n\r\n    const { _id, fromAcc, trnxDate } = data ?? transactionForm.values;\r\n\r\n    transactionForm.resetForm({\r\n      values: {\r\n        _id: _id,\r\n        trnxDate: trnxDate,\r\n        fromAcc: fromAcc,\r\n        toAcc: undefined,\r\n        desc: \"\",\r\n        rno: \"\",\r\n        received: 0.00,\r\n        paid: 0.00\r\n      },\r\n      touched: {\r\n        trnxDate: true,\r\n        fromAcc: true\r\n      }\r\n    });\r\n\r\n    customFocusField(fromAccRef);\r\n  }\r\n\r\n  const isFormFieldValid = (name: keyof Transaction) => !!(transactionForm.touched[name] && transactionForm.errors[name]);\r\n\r\n  const getFormErrorMessage = (name: keyof Transaction) => {\r\n    return isFormFieldValid(name) && <small className=\"p-error\">{transactionForm.errors[name]}</small>;\r\n  };\r\n\r\n  const selectedAccountTemplate = function(option:any, props:any){\r\n\r\n    if (option) {\r\n      return <span>{option.code + \" - \" + option.firmName}</span>\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            {props.placeholder}\r\n        </span>\r\n    );\r\n\r\n  }\r\n\r\n  const optionAccountTemplate = function(option: any){\r\n    return (\r\n        <span>{option.code + \" - \" + option.firmName}</span>\r\n    );\r\n  }\r\n\r\n  const disableAddTrnxBtn = ( ) => {\r\n\r\n    if( !transactionForm.touched['trnxDate'] || !transactionForm.touched['fromAcc'] ){\r\n      return true;\r\n    }\r\n\r\n    if(transactionForm.errors['trnxDate'] || transactionForm.errors['fromAcc']){\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  const formatTransactionAmount = (rowData: Transaction, field: 'received'|'paid') => {\r\n    return formatAmount(rowData[field]);\r\n  }\r\n\r\n  const formatTransactionDate = (rowData: Transaction,) => {\r\n    return formatDate(new Date(rowData.trnxDate));\r\n  }\r\n\r\n  function disableTrnxField(){\r\n    setDisableTrnxMainFld( (prevState) => !prevState );\r\n  }\r\n\r\n  return (\r\n    <Dialog visible={visible} modal closeOnEscape={false} header={`Transaction - ${isCreateMode ? 'Create' : 'Edit' }`} footer={footer} onHide={ closeDialog } style={{'width': '100vw', 'height': '100vh'}} blockScroll={true}>\r\n        <div className=\"p-2\">\r\n          <form className=\"p-fluid\">\r\n            <div className=\"flex gap-4 mb-6\">\r\n              <div className=\"field\">\r\n                  <label htmlFor=\"trnxDate\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Transaction Date</label>\r\n                  <Calendar name=\"trnxDate\" id=\"trnxDate\" value={transactionForm.values.trnxDate} onChange={ (e) => { transactionForm.setFieldValue('trnxDate', e.target.value) } } onSelect={ () => { customFocusField(fromAccRef); } } onBlur={transactionForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('trnxDate'), 'p-inputtext-sm': true })} placeholder=\"Trnx. Date\" required disabled={!isCreateMode || disableTrnxMainFld}\r\n                    dateFormat=\"dd/mm/yy\" minDate={transactionMinDate} maxDate={transactionMaxDate} monthNavigator yearNavigator yearRange={`${ transactionMinDate?.getFullYear() }:${transactionMaxDate?.getFullYear()}`} mask=\"99/99/9999\"\r\n                    showOnFocus={false}\r\n                  />\r\n                  {getFormErrorMessage('trnxDate')}\r\n              </div>\r\n              <div className=\"field w-1/4 max-w-1/4\">\r\n                <label htmlFor=\"fromAcc\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>From Account</label>\r\n                <Dropdown inputId='fromAcc' id=\"fromAcc\" name='fromAcc' options={accountList} optionLabel=\"firmName\" optionValue=\"code\" value={transactionForm.values.fromAcc} filter showClear filterBy=\"code,firmName\" filterPlaceholder=\"Search group code or name\" onChange={(e) => { transactionForm.setFieldValue(\"fromAcc\", e.value) }} onBlur={transactionForm.handleBlur} placeholder='Select Account'\r\n                  valueTemplate={selectedAccountTemplate} itemTemplate={optionAccountTemplate} required className={classNames({ 'p-invalid': isFormFieldValid('fromAcc'), 'p-inputtext-sm': true })} style={{\"width\": \"100%\"}} disabled={!isCreateMode || disableTrnxMainFld} resetFilterOnHide={true}\r\n                  ref={fromAccRef}>\r\n                </Dropdown>\r\n                {getFormErrorMessage('fromAcc')}\r\n              </div>\r\n              <div className=\"field\">\r\n                <label className=\"block invisible\">.</label>\r\n                { !disableTrnxMainFld && <Button type='button' label=\"Add Transaction\" onClick={() => { disableTrnxField(); customFocusField(toAccRef); } } className=\"w-1/2\" disabled={ disableAddTrnxBtn() } /> }\r\n                { disableTrnxMainFld && <Button type='button' label=\"Change Account\" onClick={ () => { disableTrnxField(); clearFieldValues(); } } className=\"w-1/2\" /> }\r\n              </div>\r\n            </div>\r\n            {\r\n              <div className=\"flex gap-2 mb-3\">\r\n                <div className=\"field w-1/4 max-w-1/4\">\r\n                  <label htmlFor=\"toAcc\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>To Account</label>\r\n                  <Dropdown inputId='toAcc' id=\"toAcc\" name='toAcc' options={accountList} optionLabel=\"firmName\" optionValue=\"code\" value={transactionForm.values.toAcc} filter showClear filterBy=\"code,firmName\" filterPlaceholder=\"Search group code or name\" onChange={(e) => { transactionForm.setFieldValue(\"toAcc\", e.value) }} onBlur={transactionForm.handleBlur} placeholder='Select Account'\r\n                    valueTemplate={selectedAccountTemplate} itemTemplate={optionAccountTemplate} required className={classNames({ 'p-invalid': isFormFieldValid('toAcc'), 'p-inputtext-sm': true })} style={{\"width\": \"100%\"}} disabled={!isCreateMode || !disableTrnxMainFld} resetFilterOnHide={true}\r\n                    ref={toAccRef}>\r\n                  </Dropdown>\r\n                  {getFormErrorMessage('toAcc')}\r\n                </div>\r\n                <div className=\"field w-1/6\">\r\n                  <label htmlFor=\"desc\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Description</label>\r\n                  <InputText type=\"text\" name=\"desc\" id=\"desc\" value={transactionForm.values.desc} onChange={transactionForm.handleChange} onBlur={transactionForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('desc'), 'p-inputtext-sm': true })} placeholder=\"Description\" required maxLength={10} disabled={!disableTrnxMainFld}/>\r\n                  {getFormErrorMessage('desc')}\r\n                </div>\r\n                <div className=\"field w-1/6\">\r\n                  <label htmlFor=\"rno\" className=\"block mb-2\">Receipt No</label>\r\n                  <InputText type=\"text\" name=\"rno\" id=\"rno\" value={transactionForm.values.rno} onChange={transactionForm.handleChange} onBlur={transactionForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('rno'), 'p-inputtext-sm': true })} placeholder=\"Receipt No\" maxLength={10} disabled={!disableTrnxMainFld}/>\r\n                  {getFormErrorMessage('rno')}\r\n                </div>\r\n                <div className=\"field w-1/6\">\r\n                  <label htmlFor=\"received\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Received Amount</label>\r\n                  <InputNumber id=\"received\" name=\"received\" value={transactionForm.values.received} onValueChange={transactionForm.handleChange} onBlur={transactionForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('received'), 'p-inputtext-sm': true })} placeholder=\"Received Amount\" mode=\"decimal\" maxFractionDigits={2} min={0} max={10000000} locale=\"en-IN\" required disabled={!disableTrnxMainFld}/>\r\n                  {getFormErrorMessage('received')}\r\n                </div>\r\n                <div className=\"field w-1/6\">\r\n                  <label htmlFor=\"paid\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Paid Amount</label>\r\n                  <InputNumber id=\"paid\" name=\"paid\" value={transactionForm.values.paid} onValueChange={transactionForm.handleChange} onBlur={transactionForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('paid'), 'p-inputtext-sm': true })} placeholder=\"Paid Amount\" mode=\"decimal\" maxFractionDigits={2} min={0} max={10000000} locale=\"en-IN\" required disabled={!disableTrnxMainFld}/>\r\n                  {getFormErrorMessage('paid')}\r\n                </div>\r\n                <div className='field'>\r\n                  <label className=\"block invisible\">.</label>\r\n                  <Button type=\"button\" label=\"Save\" icon=\"pi pi-save\" onClick={transactionForm.submitForm} />\r\n                </div>\r\n              </div>\r\n            }\r\n          </form>\r\n          {\r\n            entryList.length > 0 && (\r\n              <div>\r\n                <DataTable value={entryList}\r\n                size=\"small\"\r\n                responsiveLayout=\"scroll\"\r\n                showGridlines\r\n                scrollable\r\n                scrollHeight=\"35vh\"\r\n                stripedRows\r\n                >\r\n                  <Column field=\"trnxDate\" header=\"Trnx. Date\" body={formatTransactionDate}></Column>\r\n                  <Column field=\"fromAcc\" header=\"From Acc\"></Column>\r\n                  <Column field=\"toAcc\" header=\"To Acc\"></Column>\r\n                  <Column field=\"desc\" header=\"Description\"></Column>\r\n                  <Column field=\"rno\" header=\"Receipt\"></Column>\r\n                  <Column\r\n                    field=\"received\"\r\n                    header=\"Received\"\r\n                    align=\"right\"\r\n                    alignHeader=\"left\"\r\n                    body={(rowData) => { return formatTransactionAmount(rowData, \"received\") }}\r\n                  ></Column>\r\n                  <Column\r\n                    field=\"paid\"\r\n                    header=\"Paid\"\r\n                    align=\"right\"\r\n                    alignHeader=\"left\"\r\n                    body={(rowData) => { return formatTransactionAmount(rowData, \"paid\") }}\r\n                  ></Column>\r\n                </DataTable>\r\n              </div>\r\n            )\r\n          }\r\n        </div>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default TransactionFormComponent;","import React from \"react\";\r\nimport { Outlet, Route, Routes } from \"react-router-dom\";\r\nimport TransactionForm from \"./TransactionForm.component\";\r\n\r\nfunction TransactionDialogComponent() {\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<Outlet></Outlet>}>\r\n        <Route\r\n          path=\"create\"\r\n          element={<TransactionForm></TransactionForm>}\r\n        ></Route>\r\n        <Route\r\n          path=\"edit/:id\"\r\n          element={<TransactionForm></TransactionForm>}\r\n        ></Route>\r\n      </Route>\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default TransactionDialogComponent;","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["GROUP_LIST_REFRESH_EVENT","ACCOUNT_LIST_REFRESH_EVENT","TRANSACTION_LIST_REFRESH_EVENT","BANK_TRANSACTION_LIST_REFRESH_EVENT","USER_LIST_REFRESH_EVENT","params","useParams","navigate","useNavigate","useState","visible","setVisible","isCreateMode","setIsCreateMode","disableTrnxMainFld","setDisableTrnxMainFld","accountList","setAccountList","appCtx","useContext","AppContext","userCtx","UserContext","entryList","setEntryList","fromAccRef","useRef","toAccRef","transactionMinDate","user","finYearStart","Date","undefined","transactionMaxDate","finYearEnd","currentDate","setHours","transactionForm","useFormik","initialValues","_id","trnxDate","fromAcc","toAcc","desc","rno","received","paid","initialTouched","validationSchema","yup","shape","nullable","required","notOneOf","test","value","context","error","push","createError","message","path","onSubmit","data","setErrors","setDisplayLoader","transaction","Object","assign","createTransaction","response","id","updateTransaction","alertConfig","title","msg","type","ALERT_TYPE","onClose","closeDialog","showAlert","prevState","concat","clearFieldValues","useEffect","getAccountList","getAccountDropdownList","getTransactionInfo","getTransaction","setValues","refresh","eventBus","footer","label","icon","onClick","values","resetForm","touched","customFocusField","isFormFieldValid","name","errors","getFormErrorMessage","className","selectedAccountTemplate","option","props","code","firmName","placeholder","optionAccountTemplate","formatTransactionAmount","rowData","field","formatAmount","disableTrnxField","modal","closeOnEscape","header","onHide","style","blockScroll","htmlFor","onChange","e","setFieldValue","target","onSelect","onBlur","handleBlur","classNames","disabled","dateFormat","minDate","maxDate","monthNavigator","yearNavigator","yearRange","getFullYear","mask","showOnFocus","inputId","options","optionLabel","optionValue","filter","showClear","filterBy","filterPlaceholder","valueTemplate","itemTemplate","resetFilterOnHide","ref","handleChange","maxLength","onValueChange","mode","maxFractionDigits","min","max","locale","submitForm","length","size","responsiveLayout","showGridlines","scrollable","scrollHeight","stripedRows","body","formatDate","align","alignHeader","element","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","i","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}