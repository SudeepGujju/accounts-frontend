{"version":3,"file":"static/js/89.7d33cb2c.chunk.js","mappings":"2PAAO,IAAMA,EAA2B,qBAC3BC,EAA6B,uBAC7BC,EAAiC,2BACjCC,EAAsC,gCACtCC,EAA0B,qB,gRC+RvC,MA9QA,WAEE,IAAMC,GAASC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MACjB,GAA8BC,EAAAA,EAAAA,WAAkB,GAAhD,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAwCF,EAAAA,EAAAA,WAAkB,GAA1D,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAkCJ,EAAAA,EAAAA,UAAkB,IAApD,eAAOK,EAAP,KAAkBC,EAAlB,KACMC,GAASC,EAAAA,EAAAA,YAAWC,EAAAA,IAEpBC,GAAoCC,EAAAA,EAAAA,IAAmB,CAC3DC,cAAe,CACbC,IAAK,GACLC,KAAM,GACNC,SAAU,GACVC,WAAY,GACZC,MAAO,GACPC,IAAK,GACLC,OAAQ,GACRC,KAAM,GACNC,KAAM,GACNC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,OAAQ,GACRC,WAAY,EACZC,eAAWC,GAEbC,iBAAkBC,EAAAA,GAAW,CAC3BhB,KAAMgB,EAAAA,KAAaC,IAAI,GAAI,sCAAsCC,SAAS,oBAC1EjB,SAAUe,EAAAA,KAAaC,IAAI,GAAI,2CAA2CC,SAAS,wBACnFhB,WAAYc,EAAAA,KAAaC,IAAI,GAAI,4CACjCd,MAAOa,EAAAA,KAAaG,IAAI,GAAI,sCAAsCF,IAAI,GAAI,sCAC1Eb,IAAKY,EAAAA,KAAaC,IAAI,GAAI,qCAC1BZ,OAAQW,EAAAA,KAAaC,IAAI,GAAI,4CAC7BX,KAAMU,EAAAA,KAAaC,IAAI,GAAI,sCAC3BV,KAAMS,EAAAA,KAAaC,IAAI,GAAI,sCAC3BT,IAAKQ,EAAAA,KAAaC,IAAI,GAAI,8CAC1BR,IAAKO,EAAAA,KAAaC,IAAI,GAAI,8CAC1BP,IAAKM,EAAAA,KAAaG,IAAI,EAAG,oCAAoCF,IAAI,GAAI,qCACrEN,OAAQK,EAAAA,KAAaI,MAAM,mBAAmBH,IAAI,GAAI,yCACtDL,WAAYI,EAAAA,KAAaK,WAAWH,SAAS,+BAC7CL,UAAWG,EAAAA,KAAaE,SAAS,4BAEnCI,SAAS,WAAD,wBAAE,WAAOC,EAAP,uFAAuBC,EAAvB,EAAuBA,UAEzB,OAAN/B,QAAM,IAANA,GAAAA,EAAQgC,kBAAiB,GAEnBC,EAAeC,OAAOC,OAAO,GAAIL,GAJ/B,UAUHlC,EAVG,+BAYGqC,EAAQ3B,IAZX,UAca8B,EAAAA,EAAAA,IAAcH,GAd3B,OAcJI,EAdI,sCAkBEC,EAAKL,EAAQ3B,WAEZ2B,EAAQ3B,IApBX,WAsBaiC,EAAAA,EAAAA,IAAcN,EAASK,GAtBpC,QAsBJD,EAtBI,eAyBA,OAANrC,QAAM,IAANA,GAAAA,EAAQgC,kBAAiB,GAEnBQ,EAAc,CAACC,MAAO,UAAWC,QAASL,EAASP,KAAMa,KAAMC,EAAAA,GAAAA,QAAoBC,QAAS,WAChGC,GAAY,MAEdC,EAAAA,EAAAA,IAAUP,GA9BJ,kDAkCA,OAANxC,QAAM,IAANA,GAAAA,EAAQgC,kBAAiB,GAET,iBAAL,EAAP,IAAwB,KAAEgB,SAAS,kBACrCjB,EAAU,CAAC,KAAQ,yBAEbS,EAAc,CAACC,MAAO,QAASC,QAAQ,EAAD,GAAeC,KAAMC,EAAAA,GAAAA,QACjEG,EAAAA,EAAAA,IAAUP,IAxCN,0DAAF,qDAAC,MAgDXS,EAAAA,EAAAA,YAAW,WAET,IAAMnD,EAAS,mCAAG,8GAGSoD,EAAAA,EAAAA,MAHT,OAGRb,EAHQ,OAIdtC,EAAasC,EAASP,MAJR,gDAMd/B,EAAa,IANC,yDAAH,qDAUfD,MAEC,KAEHmD,EAAAA,EAAAA,YAAU,WAER,GAAI5D,EAAOiD,GAAX,CAMAzC,GAAgB,GAEhB,IAAMsD,EAAc,mCAAG,gHAEIC,EAAAA,EAAAA,IAAW/D,EAAOiD,IAFtB,OAEbD,EAFa,OAInBlC,EAAYkD,UAAWhB,EAASP,MAJb,gDAObU,EAAc,CAACC,MAAO,QAASC,QAAQ,EAAD,GAAeC,KAAMC,EAAAA,GAAAA,QACjEG,EAAAA,EAAAA,IAAUP,GARS,yDAAH,qDAYpBW,SAlBEtD,GAAgB,KAoBjB,CAACR,EAAOiD,KAEX,IAAMQ,EAAc,SAACQ,GAEnBA,GAAWC,EAAAA,GAAAA,SAAkBtE,EAAAA,IAE7BU,GAAW,GACXJ,GAAU,IAGNiE,GACF,4BACI,SAAC,IAAD,CAAQC,MAAM,QAAQC,KAAK,cAAcC,QAAS,kBAAMb,QACxD,SAAC,IAAD,CAAQH,KAAK,SAASc,MAAM,OAAOC,KAAK,aAAaC,QAASxD,EAAYyD,WAAYC,UAAW1D,EAAY2D,aAI/GC,EAAmB,SAACC,GAAD,SAA4B7D,EAAY8D,QAAQD,KAAS7D,EAAY+D,OAAOF,KAE/FG,EAAsB,SAACH,GAC3B,OAAOD,EAAiBC,KAAS,kBAAOI,UAAU,UAAjB,SAA4BjE,EAAY+D,OAAOF,MAuBlF,OACE,SAAC,IAAD,CAAQtE,QAASA,EAAS2E,OAAK,EAACC,eAAe,EAAOC,OAAM,oBAAe3E,EAAe,SAAW,QAAW4D,OAAQA,EAAQgB,OAAS1B,EAAc2B,MAAO,CAAC,MAAS,OAAQC,aAAa,EAA7L,UACI,gBAAKN,UAAU,MAAf,UACE,kBAAMA,UAAU,UAAhB,WACE,iBAAKA,UAAU,6BAAf,WACE,iBAAKA,UAAU,mBAAf,WACI,mBAAOO,QAAQ,OAAOP,UAAU,aAAhC,WAA6C,iBAAMA,UAAU,iBAAhB,eAA7C,WACA,SAAC,IAAD,CAAWzB,KAAK,OAAOqB,KAAK,OAAO1B,GAAG,OAAOsC,MAAOzE,EAAY0E,OAAOtE,KAAMuE,SAAU3E,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,QAAS,kBAAkB,IAASoB,YAAY,OAAOC,WAAS,EAAC3D,UAAQ,EAAC4D,UAAW,GAAIxB,UAAWjE,IAC1SuE,EAAoB,YAEzB,iBAAKC,UAAU,mBAAf,WACE,mBAAOO,QAAQ,WAAWP,UAAU,aAApC,WAAiD,iBAAMA,UAAU,iBAAhB,eAAjD,gBACA,SAAC,IAAD,CAAWzB,KAAK,OAAOqB,KAAK,WAAW1B,GAAG,WAAWsC,MAAOzE,EAAY0E,OAAOrE,SAAUsE,SAAU3E,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,YAAa,kBAAkB,IAASoB,YAAY,YAAY1D,UAAQ,EAAC4D,UAAW,KACtSlB,EAAoB,mBAGzB,iBAAKC,UAAU,6BAAf,WACE,iBAAKA,UAAU,mBAAf,WACE,kBAAOO,QAAQ,aAAaP,UAAU,aAAtC,yBACA,SAAC,IAAD,CAAWzB,KAAK,OAAOqB,KAAK,aAAa1B,GAAG,aAAasC,MAAOzE,EAAY0E,OAAOpE,WAAYqE,SAAU3E,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,cAAe,kBAAkB,IAASoB,YAAY,aAAaE,UAAW,KACtSlB,EAAoB,kBAEvB,iBAAKC,UAAU,mBAAf,WACE,kBAAOO,QAAQ,QAAQP,UAAU,aAAjC,oBACA,SAAC,IAAD,CAAWzB,KAAK,OAAOqB,KAAK,QAAQ1B,GAAG,QAAQgD,KAAK,aAAaC,SAAS,GAAGC,QAAQ,EAAMC,WAAW,EAAOb,MAAOzE,EAAY0E,OAAOnE,MAAOoE,SAAU3E,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,SAAU,kBAAkB,IAASoB,YAAY,UACxThB,EAAoB,gBAGzB,iBAAKC,UAAU,6BAAf,WACE,iBAAKA,UAAU,mBAAf,WACE,kBAAOO,QAAQ,MAAMP,UAAU,aAA/B,sBACA,SAAC,IAAD,CAAWzB,KAAK,OAAOqB,KAAK,MAAM1B,GAAG,MAAMsC,MAAOzE,EAAY0E,OAAOlE,IAAKmE,SAAU3E,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,OAAQ,kBAAkB,IAASoB,YAAY,UAAUE,UAAW,KACvQlB,EAAoB,WAEvB,iBAAKC,UAAU,mBAAf,WACE,kBAAOO,QAAQ,SAASP,UAAU,aAAlC,wBACA,SAAC,IAAD,CAAWzB,KAAK,OAAOqB,KAAK,SAAS1B,GAAG,SAASsC,MAAOzE,EAAY0E,OAAOjE,OAAQkE,SAAU3E,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,UAAW,kBAAkB,IAASoB,YAAY,YAAYE,UAAW,KACrRlB,EAAoB,iBAGzB,iBAAKC,UAAU,6BAAf,WACE,iBAAKA,UAAU,mBAAf,WACE,kBAAOO,QAAQ,OAAOP,UAAU,aAAhC,mBACA,SAAC,IAAD,CAAWzB,KAAK,OAAOqB,KAAK,OAAO1B,GAAG,OAAOsC,MAAOzE,EAAY0E,OAAOhE,KAAMiE,SAAU3E,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,QAAS,kBAAkB,IAASoB,YAAY,OAAOE,UAAW,KACxQlB,EAAoB,YAEvB,iBAAKC,UAAU,mBAAf,WACE,kBAAOO,QAAQ,OAAOP,UAAU,aAAhC,mBACA,SAAC,IAAD,CAAWzB,KAAK,OAAOqB,KAAK,OAAO1B,GAAG,OAAOsC,MAAOzE,EAAY0E,OAAO/D,KAAMgE,SAAU3E,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,QAAS,kBAAkB,IAASoB,YAAY,OAAOE,UAAW,KACxQlB,EAAoB,eAGzB,iBAAKC,UAAU,6BAAf,WACE,iBAAKA,UAAU,mBAAf,WACI,kBAAOO,QAAQ,MAAMP,UAAU,aAA/B,6BACA,SAAC,IAAD,CAAWzB,KAAK,OAAOqB,KAAK,MAAM1B,GAAG,MAAMsC,MAAOzE,EAAY0E,OAAO9D,IAAK+D,SAAU3E,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,OAAQ,kBAAkB,IAASoB,YAAY,iBAAiBE,UAAW,KAC9QlB,EAAoB,WAEzB,iBAAKC,UAAU,mBAAf,WACI,kBAAOO,QAAQ,MAAMP,UAAU,aAA/B,6BACA,SAAC,IAAD,CAAWzB,KAAK,OAAOqB,KAAK,MAAM1B,GAAG,MAAMsC,MAAOzE,EAAY0E,OAAO7D,IAAK8D,SAAU3E,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,OAAQ,kBAAkB,IAASoB,YAAY,iBAAiBE,UAAW,KAC9QlB,EAAoB,cAG3B,iBAAKC,UAAU,6BAAf,WACE,iBAAKA,UAAU,mBAAf,WACI,kBAAOO,QAAQ,MAAMP,UAAU,aAA/B,kBACA,SAAC,IAAD,CAAWzB,KAAK,OAAOqB,KAAK,MAAM1B,GAAG,MAAMsC,MAAOzE,EAAY0E,OAAO5D,IAAK6D,SAAU3E,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,OAAQ,kBAAkB,IAASoB,YAAY,MAAMO,UAAW,EAAGL,UAAW,KACjRlB,EAAoB,WAEzB,iBAAKC,UAAU,mBAAf,WACI,kBAAOO,QAAQ,SAASP,UAAU,aAAlC,sBACA,SAAC,IAAD,CAAWzB,KAAK,OAAOqB,KAAK,SAAS1B,GAAG,SAASsC,MAAOzE,EAAY0E,OAAO3D,OAAQ4D,SAAU3E,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,UAAW,kBAAkB,IAASoB,YAAY,UAAUE,UAAW,KACnRlB,EAAoB,iBAG3B,iBAAKC,UAAU,6BAAf,WACE,iBAAKA,UAAU,mBAAf,WACI,mBAAOO,QAAQ,aAAaP,UAAU,aAAtC,WAAmD,iBAAMA,UAAU,iBAAhB,eAAnD,sBACA,SAAC,IAAD,CAAa9B,GAAG,aAAa0B,KAAK,aAAaY,MAAOzE,EAAY0E,OAAO1D,WAAsBwE,cAAexF,EAAY4E,aAAcC,OAAQ7E,EAAY8E,WAAYb,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,cAAe,kBAAkB,IAASoB,YAAY,kBAAkBS,KAAK,UAAUC,kBAAmB,EAAGC,OAAO,QAAQrE,UAAQ,IACjW0C,EAAoB,kBAEzB,iBAAKC,UAAU,mBAAf,WACE,mBAAOO,QAAQ,YAAYP,UAAU,aAArC,WAAkD,iBAAMA,UAAU,iBAAhB,eAAlD,iBACA,SAAC,IAAD,CAAU2B,QAAQ,YAAYzD,GAAG,YAAY0B,KAAK,YAAYgC,QAASlG,EAAWmG,YAAY,OAAOC,YAAY,OAAOtB,MAAOzE,EAAY0E,OAAOzD,UAAW+E,QAAM,EAACC,WAAS,EAACC,SAAS,YAAYC,kBAAkB,4BAA4BxB,SAAU,SAACyB,GAAQpG,EAAYqG,cAAc,YAAaD,EAAE3B,QAAUI,OAAQ7E,EAAY8E,WAAYE,YAAY,eAClWsB,cAzGe,SAASC,EAAYC,GAEjD,OAAID,GACK,0BAAOA,EAAOnG,KAAO,MAAQmG,EAAO1C,QAIzC,0BACK2C,EAAMxB,eAiGoCyB,aA3FzB,SAASF,GACnC,OACI,0BAAOA,EAAOnG,KAAO,MAAQmG,EAAO1C,QAyF8CvC,UAAQ,EAAC2C,WAAWc,EAAAA,EAAAA,IAAW,CAAE,YAAanB,EAAiB,aAAc,kBAAkB,IAASU,MAAO,CAAC,MAAS,QAASoC,mBAAmB,IAE9N1C,EAAoB,2BCrQrC,MAjBA,WACE,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAO2C,KAAK,IAAIC,SAAS,SAAC,KAAD,IAAzB,WACE,SAAC,KAAD,CACED,KAAK,SACLC,SAAS,SAAC,EAAD,OAEX,SAAC,KAAD,CACED,KAAK,WACLC,SAAS,SAAC,EAAD","sources":["constants/events.ts","pages/account/AccountForm.component.tsx","pages/account/AccountDialog.component.tsx"],"sourcesContent":["export const GROUP_LIST_REFRESH_EVENT = \"GROUP_LIST_REFRESH\";\r\nexport const ACCOUNT_LIST_REFRESH_EVENT = \"ACCOUNT_LIST_REFRESH\";\r\nexport const TRANSACTION_LIST_REFRESH_EVENT = \"TRANSACTION_LIST_REFRESH\";\r\nexport const BANK_TRANSACTION_LIST_REFRESH_EVENT = \"BANK_TRANSACTION_LIST_REFRESH\";\r\nexport const USER_LIST_REFRESH_EVENT = \"USER_LIST_REFRESH\";","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Account, Group } from '../../models';\r\nimport './AccountForm.component.css';\r\n\r\nimport { FormikHelpers, FormikProps, useFormik } from \"formik\";\r\nimport * as yup from 'yup';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { Button } from 'primereact/button';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { InputMask } from 'primereact/inputmask';\r\nimport { classNames } from 'primereact/utils';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { createAccount, getAccount, getGroupDropdownList, updateAccount } from '../../api';\r\nimport { ALERT_TYPE, showAlert } from '../../services';\r\nimport { eventBus } from '../../utils';\r\nimport { ACCOUNT_LIST_REFRESH_EVENT } from '../../constants';\r\nimport { AppContext } from '../../context';\r\n\r\n\r\nfunction AccountFormComponent() {\r\n\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n  const [visible, setVisible] = useState<boolean>(true);\r\n  const [isCreateMode, setIsCreateMode] = useState<boolean>(true);\r\n  const [groupList, setGroupList] = useState<Group[]>([]);\r\n  const appCtx = useContext(AppContext);\r\n\r\n  const accountForm: FormikProps<Account> = useFormik<Account>({\r\n    initialValues: {\r\n      _id: \"\",\r\n      code: \"\",\r\n      firmName: \"\",\r\n      proprietor: \"\",\r\n      phone: \"\",\r\n      dno: \"\",\r\n      strtNo: \"\",\r\n      area: \"\",\r\n      town: \"\",\r\n      dl1: \"\",\r\n      dl2: \"\",\r\n      gst: \"\",\r\n      mailid: \"\",\r\n      opngBalAmt: 0.00,\r\n      groupCode: undefined\r\n    },\r\n    validationSchema: yup.object({\r\n      code: yup.string().max(10, 'Code must be 10 characters or less').required('Code is required'),\r\n      firmName: yup.string().max(50, 'Firm Name must be 50 characters or less').required('FirmName is required'),\r\n      proprietor: yup.string().max(50, 'Proprietor must be 50 characters or less'),\r\n      phone: yup.string().min(10, 'Phone number must be 10 characters').max(10, 'Phone number must be 10 characters'),\r\n      dno: yup.string().max(30, 'Dno must be 30 characters or less'),\r\n      strtNo: yup.string().max(30, 'Street No. must be 30 characters or less'),\r\n      area: yup.string().max(50, 'Area must be 50 characters or less'),\r\n      town: yup.string().max(50, 'Town must be 50 characters or less'),\r\n      dl1: yup.string().max(50, 'Drug License must be 50 characters or less'),\r\n      dl2: yup.string().max(50, 'Drug License must be 50 characters or less'),\r\n      gst: yup.string().min(2, 'GST must be 2 characters or more').max(50, 'GST must be 50 characters or less'),\r\n      mailid: yup.string().email('Invalid Mail ID').max(50, 'Mail ID must be 50 characters or less'),\r\n      opngBalAmt: yup.number().nullable().required('Opening balance is requried'),\r\n      groupCode: yup.string().required('Group code is requried')\r\n    }),\r\n    onSubmit: async (data: Account, {setErrors}: FormikHelpers<Account>) => {\r\n\r\n      appCtx?.setDisplayLoader(true);\r\n\r\n      const account: any = Object.assign({}, data);\r\n\r\n      try{\r\n\r\n        let response;\r\n\r\n        if(isCreateMode){\r\n\r\n          delete account._id;\r\n\r\n          response = await createAccount(account);\r\n\r\n        }else{\r\n\r\n          const id = account._id;\r\n\r\n          delete account._id;\r\n\r\n          response = await updateAccount(account, id);\r\n        }\r\n\r\n        appCtx?.setDisplayLoader(false);\r\n\r\n        const alertConfig = {title: 'Success', message: response.data, type: ALERT_TYPE.SUCCESS, onClose: () => {\r\n          closeDialog(true);\r\n        }};\r\n        showAlert(alertConfig);\r\n\r\n      }catch(e: any){\r\n\r\n        appCtx?.setDisplayLoader(false);\r\n\r\n        if( typeof e == 'string' && e.includes(\"already exists\")){\r\n          setErrors({'code': 'Code already exists'});\r\n        }else{\r\n          const alertConfig = {title: 'Error', message: e as string, type: ALERT_TYPE.ERROR};\r\n          showAlert(alertConfig);\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n  });\r\n\r\n  useEffect( () => {\r\n    \r\n    const groupList = async () => {\r\n  \r\n      try {\r\n        const response = await getGroupDropdownList();\r\n        setGroupList(response.data);\r\n      } catch (e) {\r\n        setGroupList([]);\r\n      }\r\n    }\r\n\r\n    groupList();\r\n\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n\r\n    if(!params.id)\r\n    {\r\n      setIsCreateMode(true);\r\n      return;\r\n    }\r\n\r\n    setIsCreateMode(false);\r\n\r\n    const getAccountInfo = async () => {\r\n      try {\r\n        const response = await getAccount(params.id as string);\r\n\r\n        accountForm.setValues( response.data )\r\n  \r\n      } catch (e) {\r\n        const alertConfig = {title: 'Error', message: e as string, type: ALERT_TYPE.ERROR};\r\n        showAlert(alertConfig);\r\n      }\r\n    }\r\n\r\n    getAccountInfo();\r\n\r\n  }, [params.id]);\r\n\r\n  const closeDialog = (refresh?: boolean) => {\r\n    \r\n    refresh && eventBus.dispatch(ACCOUNT_LIST_REFRESH_EVENT);\r\n\r\n    setVisible(false);\r\n    navigate(-1);\r\n  }\r\n\r\n  const footer = (\r\n      <div>\r\n          <Button label=\"Close\" icon=\"pi pi-times\" onClick={() => closeDialog()} />\r\n          <Button type=\"button\" label=\"Save\" icon=\"pi pi-save\" onClick={accountForm.submitForm} disabled={!accountForm.isValid} />\r\n      </div>\r\n  );\r\n\r\n  const isFormFieldValid = (name: keyof Account) => !!(accountForm.touched[name] && accountForm.errors[name]);\r\n\r\n  const getFormErrorMessage = (name: keyof Account) => {\r\n    return isFormFieldValid(name) && <small className=\"p-error\">{accountForm.errors[name]}</small>;\r\n  };\r\n\r\n  const selectedGroupTemplate = function(option:any, props:any){\r\n\r\n    if (option) {\r\n      return <span>{option.code + \" - \" + option.name}</span>\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            {props.placeholder}\r\n        </span>\r\n    );\r\n\r\n  }\r\n\r\n  const optionGroupTemplate = function(option: any){\r\n    return (\r\n        <span>{option.code + \" - \" + option.name}</span>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Dialog visible={visible} modal closeOnEscape={false} header={`Account - ${isCreateMode ? 'Create' : 'Edit' }`} footer={footer} onHide={ closeDialog } style={{'width': '50%'}} blockScroll={true}>\r\n        <div className=\"p-2\">\r\n          <form className=\"p-fluid\">\r\n            <div className=\"flex justify-between gap-4\">\r\n              <div className=\"field mb-6 w-1/2\">\r\n                  <label htmlFor=\"code\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Code</label>\r\n                  <InputText type=\"text\" name=\"code\" id=\"code\" value={accountForm.values.code} onChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('code'), 'p-inputtext-sm': true })} placeholder=\"Code\" autoFocus required maxLength={10} disabled={!isCreateMode} />\r\n                  {getFormErrorMessage('code')}\r\n              </div>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                <label htmlFor=\"firmName\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Firm Name</label>\r\n                <InputText type=\"text\" name=\"firmName\" id=\"firmName\" value={accountForm.values.firmName} onChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('firmName'), 'p-inputtext-sm': true })} placeholder=\"Firm Name\" required maxLength={50} />\r\n                {getFormErrorMessage('firmName')}\r\n              </div>\r\n            </div>\r\n            <div className='flex justify-between gap-4'>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                <label htmlFor=\"proprietor\" className=\"block mb-2\">Proprietor</label>\r\n                <InputText type=\"text\" name=\"proprietor\" id=\"proprietor\" value={accountForm.values.proprietor} onChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('proprietor'), 'p-inputtext-sm': true })} placeholder=\"Proprietor\" maxLength={50} />\r\n                {getFormErrorMessage('proprietor')}\r\n              </div>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                <label htmlFor=\"phone\" className=\"block mb-2\">Phone</label>\r\n                <InputMask type=\"text\" name=\"phone\" id=\"phone\" mask=\"9999999999\" slotChar=\"\" unmask={true} autoClear={false} value={accountForm.values.phone} onChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('phone'), 'p-inputtext-sm': true })} placeholder=\"Phone\" />\r\n                {getFormErrorMessage('phone')}\r\n              </div>\r\n            </div>\r\n            <div className='flex justify-between gap-4'>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                <label htmlFor=\"dno\" className=\"block mb-2\">Door No</label>\r\n                <InputText type=\"text\" name=\"dno\" id=\"dno\" value={accountForm.values.dno} onChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('dno'), 'p-inputtext-sm': true })} placeholder=\"Door No\" maxLength={30} />\r\n                {getFormErrorMessage('dno')}\r\n              </div>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                <label htmlFor=\"strtNo\" className=\"block mb-2\">Street No</label>\r\n                <InputText type=\"text\" name=\"strtNo\" id=\"strtNo\" value={accountForm.values.strtNo} onChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('strtNo'), 'p-inputtext-sm': true })} placeholder=\"Street No\" maxLength={30} />\r\n                {getFormErrorMessage('strtNo')}\r\n              </div>\r\n            </div>\r\n            <div className='flex justify-between gap-4'>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                <label htmlFor=\"area\" className=\"block mb-2\">Area</label>\r\n                <InputText type=\"text\" name=\"area\" id=\"area\" value={accountForm.values.area} onChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('area'), 'p-inputtext-sm': true })} placeholder=\"Area\" maxLength={50} />\r\n                {getFormErrorMessage('area')}\r\n              </div>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                <label htmlFor=\"town\" className=\"block mb-2\">Town</label>\r\n                <InputText type=\"text\" name=\"town\" id=\"town\" value={accountForm.values.town} onChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('town'), 'p-inputtext-sm': true })} placeholder=\"Town\" maxLength={50} />\r\n                {getFormErrorMessage('town')}\r\n              </div>\r\n            </div>\r\n            <div className='flex justify-between gap-4'>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                  <label htmlFor=\"dl1\" className=\"block mb-2\">Drug License 1</label>\r\n                  <InputText type=\"text\" name=\"dl1\" id=\"dl1\" value={accountForm.values.dl1} onChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('dl1'), 'p-inputtext-sm': true })} placeholder=\"Drug License 1\" maxLength={50} />\r\n                  {getFormErrorMessage('dl1')}\r\n              </div>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                  <label htmlFor=\"dl2\" className=\"block mb-2\">Drug License 2</label>\r\n                  <InputText type=\"text\" name=\"dl2\" id=\"dl2\" value={accountForm.values.dl2} onChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('dl2'), 'p-inputtext-sm': true })} placeholder=\"Drug License 2\" maxLength={50} />\r\n                  {getFormErrorMessage('dl2')}\r\n              </div>\r\n            </div>\r\n            <div className='flex justify-between gap-4'>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                  <label htmlFor=\"gst\" className=\"block mb-2\">GST</label>\r\n                  <InputText type=\"text\" name=\"gst\" id=\"gst\" value={accountForm.values.gst} onChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('gst'), 'p-inputtext-sm': true })} placeholder=\"GST\" minLength={2} maxLength={15} />\r\n                  {getFormErrorMessage('gst')}\r\n              </div>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                  <label htmlFor=\"mailid\" className=\"block mb-2\">Mail ID</label>\r\n                  <InputText type=\"text\" name=\"mailid\" id=\"mailid\" value={accountForm.values.mailid} onChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('mailid'), 'p-inputtext-sm': true })} placeholder=\"Mail ID\" maxLength={50} />\r\n                  {getFormErrorMessage('mailid')}\r\n              </div>\r\n            </div>\r\n            <div className='flex justify-between gap-4'>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                  <label htmlFor=\"opngBalAmt\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Opening Balance</label>\r\n                  <InputNumber id=\"opngBalAmt\" name=\"opngBalAmt\" value={accountForm.values.opngBalAmt as number} onValueChange={accountForm.handleChange} onBlur={accountForm.handleBlur} className={classNames({ 'p-invalid': isFormFieldValid('opngBalAmt'), 'p-inputtext-sm': true })} placeholder=\"Opening Balance\" mode=\"decimal\" maxFractionDigits={2} locale=\"en-IN\" required/>\r\n                  {getFormErrorMessage('opngBalAmt')}\r\n              </div>\r\n              <div className=\"field mb-6 w-1/2\">\r\n                <label htmlFor=\"groupCode\" className=\"block mb-2\"><span className='text-[#e24c4c]'>*</span>Group Code</label>\r\n                <Dropdown inputId='groupCode' id=\"groupCode\" name='groupCode' options={groupList} optionLabel=\"name\" optionValue=\"code\" value={accountForm.values.groupCode} filter showClear filterBy=\"code,name\" filterPlaceholder=\"Search group code or name\" onChange={(e) => { accountForm.setFieldValue(\"groupCode\", e.value) }} onBlur={accountForm.handleBlur} placeholder='Select Group'\r\n                 valueTemplate={selectedGroupTemplate} itemTemplate={optionGroupTemplate} required className={classNames({ 'p-invalid': isFormFieldValid('groupCode'), 'p-inputtext-sm': true })} style={{\"width\": \"100%\"}} resetFilterOnHide={true}>\r\n                </Dropdown>\r\n                {getFormErrorMessage('groupCode')}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default AccountFormComponent","import React from \"react\";\r\nimport { Outlet, Route, Routes } from \"react-router-dom\";\r\nimport AccountFormComponent from \"./AccountForm.component\";\r\n\r\nfunction AccountDialogComponent() {\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<Outlet></Outlet>}>\r\n        <Route\r\n          path=\"create\"\r\n          element={<AccountFormComponent></AccountFormComponent>}\r\n        ></Route>\r\n        <Route\r\n          path=\"edit/:id\"\r\n          element={<AccountFormComponent></AccountFormComponent>}\r\n        ></Route>\r\n      </Route>\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default AccountDialogComponent;"],"names":["GROUP_LIST_REFRESH_EVENT","ACCOUNT_LIST_REFRESH_EVENT","TRANSACTION_LIST_REFRESH_EVENT","BANK_TRANSACTION_LIST_REFRESH_EVENT","USER_LIST_REFRESH_EVENT","params","useParams","navigate","useNavigate","useState","visible","setVisible","isCreateMode","setIsCreateMode","groupList","setGroupList","appCtx","useContext","AppContext","accountForm","useFormik","initialValues","_id","code","firmName","proprietor","phone","dno","strtNo","area","town","dl1","dl2","gst","mailid","opngBalAmt","groupCode","undefined","validationSchema","yup","max","required","min","email","nullable","onSubmit","data","setErrors","setDisplayLoader","account","Object","assign","createAccount","response","id","updateAccount","alertConfig","title","message","type","ALERT_TYPE","onClose","closeDialog","showAlert","includes","useEffect","getGroupDropdownList","getAccountInfo","getAccount","setValues","refresh","eventBus","footer","label","icon","onClick","submitForm","disabled","isValid","isFormFieldValid","name","touched","errors","getFormErrorMessage","className","modal","closeOnEscape","header","onHide","style","blockScroll","htmlFor","value","values","onChange","handleChange","onBlur","handleBlur","classNames","placeholder","autoFocus","maxLength","mask","slotChar","unmask","autoClear","minLength","onValueChange","mode","maxFractionDigits","locale","inputId","options","optionLabel","optionValue","filter","showClear","filterBy","filterPlaceholder","e","setFieldValue","valueTemplate","option","props","itemTemplate","resetFilterOnHide","path","element"],"sourceRoot":""}